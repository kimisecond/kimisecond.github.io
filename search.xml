<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据库概念 SQL（一） 第三课笔记]]></title>
    <url>%2F2018%2F03%2FDBS-Concept-Lecture-Three%2F</url>
    <content type="text"><![CDATA[2018年3月8日13:35 写在前面本笔记仅仅是本人在上课时的一些随手记录，并不完整也不完全正确。如有错误，请在评论中或直接联系我指正，谢谢！ 原始文件下载：(mht)(pdf) What is SQL?DDL Data-definition language DDLDML Data-manipultaion language DML e.g: ID: Attributes of the resulting relation Instructor: relation to which the query refers Salary&gt;65000: Condition that must be satisfied Define Retrieve Insert, delete or update Data Control Language SQL: History Commercial systems offer most, if not all, SQL-92 features, plus varyingfeature sets from later standards and special proprietary features Not all examples here may work on your particular system. An Action Main contents of SQL Data definition Basic query structure Set operations Aggregate functions Null values Nested subqueries Complex queries Views Modification of the database Data definition - data definition language The schema for each relation The domain of values associated with each attribute Integrity constraints The set of indices to be maintained for each relations Security and authorization information for each relation The physical storage structure of each relation on disk Basic Domain Types Schema definition in SQL - Create Table Construct Integrity Constraints in Create Table Check(P)： 每一个元组必须满足P条件，是一个创建表时使用的约束条件 Drop and Alter Table Constructs Basic Query Structure SQL查询的结果仍是一个关系 The select Clause select语句列出一次查询所想要的属性 与关系代数的投影运算相对应 e.g.：find the names of all instructors 12select namefrom instructor 注意：SQL名字是大小写不敏感的 （i.e., 大小写字母都可使用） SQL允许关系中有重复，查询结果中亦是如此 为了强制消除重复，必须在选择后加入关键词 DISTINCT e.g. Find the names of all departments with instructor, and remove duplicates 12select DISTINCT dept_namefrom instructor ALL关键词指的是重复结果不会被删除 12select all dept_namefrom instructor select语句中使用星号（*）表示“所有属性” 12select *from instructor select语句可以包含算数表达式，包括运算（+，-，*，/）以及对元组的常量或属性的运算 e.g. 12select ID, name, salary/12from instructor 这个语句表示获得一个关系，其与instructor关系相同，但是salary属性的值被除以12 The where Clause where语句规定结果必须满足的条件 与关系代数的选择运算对应 e.g. find all instructors in Comp. Sci. dept with salary &gt; 80000 123select namefrom instructorwhere dept_name = 'Comp. Sci.' and salary &gt; 80000 比较结果可以与逻辑连接词（AND OR NOT）一起用 算术表达式结果可以被比较 The from Clause from语句是查询所处的关系 与关系代数中的笛卡尔乘积相对应 e.g. Instructor X teaches 12select *from instructor, teaches 产生所有可能的instructor - teaches对 笛卡尔乘积的输出并不直接有用，不过与where语句一起用之后就有用了 Joins Natural Join 即关系代数中的natual join运算，可以直接关键词使用 12select *from instructor natural join teaches e.g. List the names of instructors along with the course ID of the courses that they taught 12345select name, course_idfrom instructor, teacheswhere instructor.ID = teaches.IDselect name, course_idfrom instructor natural join teaches 注意：两张表之间可能会存在同属性名，语义却不同的情况 List the names of instructors along with the titles of courses that they teach 注意course的dept_name和instructor的dept_name表达的语义不相同 Incorrect version (makes course.dept_name = instructor.dept_name) 12select name, title from instructor natural join teaches natural join course; Correct version 12select name, title from instructor natural join teaches, course where teaches.course_id = course.course_id; Another correct version 123select name, title from (instructor natural join teaches) join course using(course_id); The Rename Operation SQL允许重命名关系或属性（关键词as） 1old-name as new-name e.g. 12select ID, name, salary/12 as monthly_salaryfrom instructor e.g. Find the names of all instructors who have a higher salary than some instructor in ‘Camp. Sci’. 123select distinct T.namefrom instructor as T, instructor as Swhere T.salary &gt; S.salary and S.dept_name = 'Comp. Sci.' as关键词是可选的，可以忽略 在Oracle中，as必须忽略 String Operations SQL包含了一个字符串比对运算符，用来对字符串进行比较。”Like”运算符使用两个特殊字符 % 与所有字串配对 _ 与所有字符对应 e.g. find the names of all instructors whose name includes the substring “dar” 123select namefrom instructorwhere name like '%dar%' Match the string “100 %” 1like '100 \%' escape '\' 这些形式是大小写敏感的（与select中name大小写不敏感不同） 形式对应的例子 ‘Intro%’ 开头为”Intro”的串 ‘%Comp%’ 有”Comp”子串的串 ‘_ _ _‘ 三字符串 ‘_ _ _ %’ 至少三字符的串 SQL支持一些字符串操作 级联（并列）”||“ 大小写转换 串长，抓取子串等 Ordering the Display of Tuples List in alphabetic order the names of all instructors 123select distinct namefrom instructororder by name 可以使用desc或asc关键词来确定排序的升降 默认为升序 1order by name desc 可以同时对多个属性进行排序 Where Clause Predicates SQL包含了一个between比较运算符 e.g. Find the names of all instructors with salary between $90,000 and $100,000 (that is, $90,000 and $100,000) 123select namefrom instructorwhere salary between 90000 and 100000 元祖比较 123select name, course_id from instructor, teaches where (instructor.ID, dept_name) = (teaches.ID,'Biology'); Duplicates 在有重复项的关系中，SQL可以定义在结果中显示多少份元组复制项 Multiset版本的关系代数运算符 - 以关系r1与r2为例 σθ (r1): If there are c1 copies of tuple t1 in r1, and t1 satisfiesselections σθ,, then there are c1 copies of t1 in σθ(r1). ΠA (r ): For each copy of tuple t1 in r1, there is a copy of tupleΠA (t1) in ΠA (r1) where ΠA (t1) denotes the projection ofthe single tuple t1. r1 x r2 : If there are c1 copies of tuple t1 in r1 and c2 copies oftuple t2 in r2, there are c1 x c2 copies of the tuple t1. t2 in r1 x r2 Set Operations 集合操作并集 (union)，交集 (intersect)和补集 (except)基于关系操作，与关系代数的交并补相对应 上述所有的操作自动去除重复项；为了保留重复项，必须使用对应的multiset版本运算符unionall, intersect all 和 except all e.g. Null Values 元组的一些属性值可以为空值，用null来表示 null表示未知值或该值不存在 所有带null的算数运算的结果都是null e.g: 5 + null returns null 谓词is null可用来检查空值 e.g. find all instructors whose salary is null. 123select namefrom instructor where salary is null Null Values and Three Valued Logic 所有与空值的比较结果都为unknown Example: 5 &lt; null or null &gt; null or null = null 使用真值unknown的三值逻辑 OR: (unknown or true) = true (unknown or false) = unknown (unknown or unknown) = unknown AND: (T and U) = U (F and U) = F (U and U) = U NOT: (not unknown) = unknown 如P为U “P is unknown” 为真 如果where谓词后为U，那此谓词为F Aggregate Functions 这些函数在一个关系的一列中的多个值上操作 Avg: average value Min: minimum value Max: maximum value Sum: sum of values Count: number of values e.g. find the average salary of instructors in the Computer Science department 123select avg (salary)from instructorwhere dept_name = 'Comp. Sci.'; Find the total number of instructors who teach a course in the Spring 2010 semester 123select count (distinct ID)from teacheswhere semester = 'Spring' and year = 2010 Find the number of tuples in the course relation 12select count (*)from course; Aggregate Functions - Group By Find the average salary of instructors in each department 123select dept_name, avg (salary)from instructorgroup by dept_name Note: departments with no instructor will not appear in result select语句中的属性（且在集合函数外的）必须在group by中出现 /* erroneous query */ 123select dept_name, ID, avg (salary)from instructorgroup by dept_name; Aggregate Functions - Having Clause Find the names and average salaries of all departments whose average salary is greater than 42000 1234select dept_name, avg (salary)from instructorgroup by dept_namehaving avg (salary) &gt; 42000; 注意：having语句中的谓词是在组形成之后再进行的；相对地，where语句则是在之前进行 e.g. 为上述代码 操作顺序 From Where Group by Having select Null Values and Aggregates Total all salaries 12select sum (salary)from instructor 上述语句忽略了空值 如果没有非空值，结果为空值 所有集合运算，除去count(*)，都忽略操作属性值中带空值的元组 如果其中只有空值 Count 返回 0 其他集合运算返回 null]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Database_System_Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库概念 关系模型/Relational Model 第二课笔记]]></title>
    <url>%2F2018%2F03%2FDBS-Concept-Lecture-Two%2F</url>
    <content type="text"><![CDATA[2018年3月6日09:54 写在前面本笔记仅仅是本人在上课时的一些随手记录，并不完整也不完全正确。如有错误，请在评论中或直接联系我指正，谢谢！原始文件下载：(mht)(pdf) Outline 概念 关系代数 SQL查询语言 Why Study RDM? Extremely useful and simple 2D tables Allows clean yet powerful manipulation languages Most widely used model Competitors: object-oriented model, semi-structured (XML) model Example:Instructor: Relation name每一行为一个tuple（记录）汉语为元组Name of all the attributes(属性): ID name dept_name…每一个实例为一个relation instanceRelation -> tableTuple -> rowAttribute -> column Attribute typesThe set of allowed values for each attribute is called the domain of the attribute.Attribute values required to be atomic(indivisible)Null 空值: the value is unknown or doesn’t exist Relation Schema and Instance规范化表达A1-An AttributesR=(A1, A2,…) relation schemaExample: instructor = (ID, name, dept_name, salary)Formally, given sets D1, D2,… a relation r is a subset of D1 x D2 x …Thus, a relation is a set of n-tuples (a1, a2…) where each ai belongs to DiThe current values (relation instance) of a relation are specified by a tableAn element t of r is a tuple, represented by a row in a table Order of tuples is irrelevant (normally in an arbitrary order)Attributes of a relation form a set, not a list! KeysHow tuples within a given relation are distinguished?K为R子集 K is a superkey of R if values for K are sufficient to identify a unique tuple of each possible relation 超级码 区分元组的属性 By possible r we mean a relation r that could exist in the enterprise we are modeling Example: {customer_name, customer_street} and {customer_name} are both superkeys of customer, if no two customers can possibly have the same name K is a candidate key if K is minimal 候选码（最小超级码） Example: {customer_name} is a candidate key for Customer, since it is a superkey (assuming no two customers can possible have the same name), and no subset of it is a superkey. Primary Key: a candidate key chosen as the principle means ofidentifying tuples within a relation 主码 被选用为区分元组的候选码 Should choose an attribute whose value never, or very rarely, changes(e.g. email addresses) Foreign key: a relation schema may have an attribute that corresponds to the primary key of another relation. The attribute is called a foreign key. 外码 Only values occurring in the primary key attribute of the referenced relation may occur in the foreign key attribute of the referencing relation. 将两张表的两个元组联系起来（两张表中可能存在相同的属性列，其在一张表中为主码，另一张表中则为外码）在录入数据时，先录入主码表 Schema Diagrams模式图 Relational Query Languages关系代数A query language is a language in which a user requests information from the database.基于关系的一些运算，基于运算符和运算数，访问查询数据库中的数据，一种数学表达 选择运算σ A=B and D>5(r) 选择A=B且D>5的元组 投影运算Π A, C (R) 取A，C属性并去重 连接运算 - 笛卡尔乘积r x s 并集运算r ∪ s 差集运算列数相等且同质r - s Natural joinr ⋈ s输出相同列中有相同值的元组的集合]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Database_System_Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库概念 序言/Introduction 第一课笔记]]></title>
    <url>%2F2018%2F03%2FDBS-Concept-Lecture-One%2F</url>
    <content type="text"><![CDATA[2018年3月1日12:59 写在前面本笔记仅仅是本人在上课时的一些随手记录，并不完整也不完全正确。如有错误，请在评论中或直接联系我指正，谢谢！ 原始文件下载：(mht)(pdf) Database management system (DBMS) Contains information about a particular enterprise Collection of interrelated data Set of programs to access the data（增删改查） An environment that is both convenient and efficient to use 教材：University Database Example 第六版 Drawbacks of using file systems to store data Data redundancy and inconsistency一致性 Multiple file formats, duplications of information in different files Difficulty in accessing data Need to write a new program to carry out each new task Data isolation - multiple files and formats Integrity problems 数据完整性 Integrity constraints (e.g., grade > 0) become “buried” in program coderather than being stated explicitly 数据合法性等问题 Hard to add new constraints or change existing ones Atomicity of update 修改原子性 Failures may leave database in an inconsistent state with partialupdates carried out e.g.: Transfer of funds from one account to another should eithercomplete or not happen at all Rollback 回滚 Concurrent access by multiple users 并发访问 Concurrent access needed for performance Uncontrolled concurrent accesses can lead to inconsistencies 锁机制 Security problems Hard to provide user access to some, but not all, data View of Data 数据的视图A major purpose of a database system is to provide uses with an abstract viewof a data. The database system hides certain details of how the data are storedand maintained. P6 Physical levelThe lowest level of abstraction describes how the data are actually stored. Thephysical level describes complex low-level data structures in detail. Logical levelThe next-higher level of abstraction describes what data are stored in thedatabase, and what relationships exist among those data. View levelThe highest level of abstraction describes only part of the entire database.(Application programs) Instances and SchemasSimilar to types and variables in programming languages Schema模式，指的是数据库的结构（表格式） Physical schema: database design at the physical level Logical schema: logical levelInstance实例给定schema，在当前数据库中的数据The actual content of the database at a particular point in time Analogous to the value of a variablePhysical Data Independence物理数据独立性The ability to modify the physical schema without changing the logical schema Applications depend on the logical schema In general, the interfaces between the various levels and components shouldbe well defined so that changes in some parts do not seriously influenceothers Data ModelsA way to describe the design of a database at the physical, logical and viewlevel. A collection of tools for describing Data Data relationships Data semantics Data constraints Relational model关系模型 Entity-Relationship data model (mainly for database design)(E-R)实体联系模型 Object-based data models (Object-oriented and Object-relational) Semi-structured data model (XML) 半结构化数据模型 json *自学 Other older models Network model Hierarchical model （银行） NoSQL 数据库数据模型 Key-Value Document-oriented Graph Column-family 列族 Database Language DDL data definition language: specify the database schema DML data manipulation language: express database queries and update They are not two separate languages, instead they are parts of a singledatabase language, such as SQL Relational ModelExample of tabular data in the relational model关系表列：属性 首行决定schema 下面即为instance DML增删改查两种类 Procedural DMLs require a user to specify what data are needed and how toget those data Declarative DMLs (also referred to as nonprocedural DMLs) require a user tospecify what data are needed without specifying how to get those dataQuery languageSQL is the best. e.g.123select instructor.namefrom instructorwhere instructor.dept name = ’History’; DDL Data storage and definition language define the implementation details ofthe database schemas(hidden from the users) Must satisfy certain consistency constraints Domain constraints Referential integrity Assertions Authorization SQL provides a rich DDL that allows one to define tables, integrity constraints,assertions, etc.e.g.:1234create table department(dept_name char (20),building char (15),budget numeric (12,2)); Application programs generally access databases through one of Embedded/ language extension Database designThe process of designing the general structure of the database Logical Design - Deciding on the database schema Business decision CS decision Physical Design - Deciding on the physical layout of the database Design approachesNormalization theory C8 Formalize what designs are bad, and test for themE-R Model C7 (*Test) The Entity-Relationship ModelModels an enterprise as a collection of entities and relationships Described by a set of attributesRepresented diagrammatically by an entity-relationship diagram Entity sets are represented by a rectangular box with the entity set name inthe header and the attributes listed below it. Relationship sets are represented by a diamond connecting a pair of relatedentity sets. The name of the relationship is placed inside the diamond. Storage Management (Physical Level)The storage manager is the component of a database system that provides theinterface between the low-level data stored in the database and the applicationprograms and queries submitted to the system. Query Processing Parsing and translation Optimization Evaluation Transaction: An Execution of a DB Program A transaction is a collection of operations that performs a single logicalfunction in a database application An atomic sequence of database actions (R/W) Each transaction, executed completely, must leave the DB in a consistentstate if DB is consistent Recovery manager, failure recovery Concurrency-control manager]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Database_System_Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统概念 安全/Security 第十四章笔记]]></title>
    <url>%2F2018%2F01%2FOS-Concept-Chapter-Fourteen%2F</url>
    <content type="text"><![CDATA[2018年1月4日08:06 写在前面本笔记仅仅是本人在上课时的一些随手记录，并不完整也不完全正确。 如有错误，请在评论中或直接联系我指正，谢谢！ 原始文件下载：(mht)(pdf) Safety Security 包含十四、十五章 系统安全的基本概念内容数据机密性 将几米的数据置于保密状态，仅允许被授权的用户访问计算机系统中的信息 数据完整性 指未经授权的用户不能擅自修改系统中所保存的信息,且能保持系统中的数据一致性。(建立、删除、增加、修改) 系统可用性 指授权用户的正常请求能及时、正确、安全地得到服务或相应 性质多面性——在较大规模的系统中都存在着多个风险点：物理安全、逻辑安全、安全管理三方面的内容 动态性——信息的有效性、攻击手段不断变化 层次性——涉及诸多方面、且相当复杂的问题，因此需要采用系统工程的方法来解决，通常也采用层次化方法 适度性——根据实际需要，提供适度的安全目标加以实现，全面覆盖难于实现 安全威胁的类型假冒(Masquerading)用户身份 也称为身份攻击 指用户身份被非法窃取，亦即攻击者伪装成一个合法用户，利用安全体制所允许的操作去破坏系统安全 在网络环境下，假冒者又可分为发方假冒的收方假冒两种 用户在进行通信或交易之前，必须对发方和收方的身份进行认证 数据截取(Data Interception) 未经核准通过非正当途径截取网络中的文件和数据，由此造成网络信息的泄漏 街区方式可以是直接中电话线上窃听，也可以是利用计算机和相应的软件来截取信息 拒绝服务(Denial of Server DOS) 未经主管部门的许可，而拒绝接收一些用户对网络中的资源进行访问 修改(Modification)信息 未经核准的用户不仅可能从系统中截获信息，而且还可以修改数据包中的信息，比如，可以修改数据包中的协议控制信息，使该数据包被传送到非指定的目标。 伪造(Fabrication)信息 将编造的虚假信息送入计算机，或者在某些文件中增加一些虚假的记录，这同样会威胁到系统中数据的完整性 否认(Repudiation)操作 又称为抵赖，是指某人不承认自己曾经做过的事情。（在发出一条消息后又否认这条消息） 中断(Interruption)传输 指系统中因某资源被破坏而造成信息传输的中断 中断可能由硬件故障引起，如磁盘故障、电源掉电和通信线路断开等；也可能由软件故障引起 通信量分析(Traffic Analysis) 通过窃听手段窃取在线路中传输的信息，再考察数据包中的协议控制信息，可以了解到通信者的身份、地址； 通过研究数据包的长度和通信频度，攻击者可以了解到所交换数据的性质 ##数据加密技术 发展 经典密码学 1949年，信息论的创始人香农 (C.E. Shannon) 提出了数据加密的必要性 模型组成四部分： 明文(plain text)——准备加密的文本，明文P 密文(cipher text)——加密后的文本，密文Y 加密（解密）算法E(D)——用于实现从明文（密文）到密文（明文）转换的公式、规则或程序 密钥K——密钥是加密和解密算法中的关键参数 类型对称性分类 对称加密算法 非对称加密算法 所变换铭文的单位分类 序列加密算法 分组加密算法 对称加密算法与非对称加密算法对称加密算法 DES(Data Encryption Standard) (IBM 1971-1972) 加密和解密使用的密钥相同 非对称加密算法 对数据进行加密和解密时，使用不同的密钥（公私钥）。每个用户都保存一对密钥，公钥对外公开。 发信者公钥加密，收信者私钥解密 数字签名和数字证书数字签名 在利用计算机网络传送报文时，可将公钥用于电子（数字）签名，来代替传统的签名。而为了能使数字签名能够代替传统签名，必须满足以下三个条件： 接收者能够核实发送者对报文的签名 发送者事后不能抵赖其对报文的签名 接收者无法伪造对报文的签名 简单数字签名 发送者A可使用私用密钥对明文P进行加密，传送给接收者B。B可利用A的公开密钥进行解密 接收者能利用A的公开密钥进行解密，这便证实了发送者对报文的签名 保密数字签名 为了实现在发送者A和接收者B之间的保密数字签名，要求A和B都具有密钥 数字证书(Certificate) 虽然可以利用公钥发进行数字签名，但事实上又无法证明公钥的持有者是合法的持有者 必须要一个可信的认证机构CA (Certification Authority).由该机构为公钥发放一份公钥证书，又把该公钥证书称为数字证书，用于证明通信请求者的身份 网络加密技术 链路加密——对在网络相邻节点之间通信线路上传输的数据进行加密 端-端加密 在源主机或前端机FEP中的高层（从传输层到应用层）对所传输的数据进行加密 在物理信道上和中间节点中，报文的正文始终是密文，直至信息到达目标主机才被翻译 认证技术基于口令的身份认证 当一个用户要登陆某台计算机时，操作系统通常都要认证用户的身份 利用口令来确认认证用户的身份 基本要求 长度适中 通常的口令是由一串字母和数字组成。如果口令太短，则很容易被攻击者猜中。 如果使用较长的口令，可以显著地增加猜中一个口令的时间 自动断开连接 为了给攻击者猜中口令增加难度，在口令机制中引入自动断开连接的功能，即只允许用户输入有限次数地不正确口令 如果不正确次数超过一定量，系统则自动断开此连接 隐蔽回送显示 在用户输入口令时，登陆程序不应将该口令回送到屏幕上显示 记录和报告 记录所有用户登陆进入系统和退出系统的时间 也用来记录和报告攻击者非法猜测口令的企图，以及所发生地于安全性有关的其他不轨行为，这样便能及时发现有人在对系统的安全性进行攻击 一次性口令 为了把由于口令泄露所造成的损失减到最小，用户应当经常改变口令 口令文件 配置有一份口令文件，用于保存合法用户的口令和与口令相联系的特权 经常利用加密技术，选择一个函数来对口令进行加密 尽量对口令进行加密是一个很好的方法，但它也不是绝对的安全可靠。其主要威胁来自于两个方面： 当攻击者已掌握了口令的解密密钥时，就可用它来破译口令 利用加密程序来破译口令，如果运行加密程序的计算机速度足够快，则通常只要几个小时便可破译口令 因此，口令文件需要妥善保管。 基于物理标志的认证技术基于磁卡的认证技术 在磁条中存储用户信息 通常在磁卡认证的基础上，增加口令机制 基于IC卡的认证技术 IC卡是集成电路卡的英文缩写 IC卡中可装入CPU和存储器芯片，使该卡具有一定的智能 基于生物标志的认证技术指纹视网膜 眼纹 信息量远比指纹复杂，信息需要256个字节编码 声音 即使在强干扰的环境下，也能很好地分辨出每个人的语音 基本方法：对一个人说好的语音进行分析，利用声音特征制作成语音口令系统 手指长度基于公钥的认证技术访问控制技术访问权 为了对系统中的对象加以保护，应由系统来控制进程对对象的访问 把一个进程能对某对象执行操作的权力称为访问权 (AssessRight)。每个访问权可以用一个有序对（对象名，权集）表示，例如，某进程有对文件F1执行读和写操作的权力，这时，可将该进程的访问权表示成(F1,{R/W})。 保护域 为了对系统中的资源进行保护而引入了保护域的概念，保护域简称为“域”。 “域”是进程对一组对象访问权的集合，进程只能在指定域内执行操作，这样，“域”也就规定了进程所能访问的对象和能执行的操作。 例如：两个域中运行的进程都能使用打印机 对象Printer 1同时出现在域2和域3中 进程和域间的联系方式静态 在进程和域之间，可以一一对应，即一个进程只联系着一个域 在进程的整个生命期中，其可用资源是固定的，我们把这种域称为“静态域” 动态 进程和域之间，可以是一对多的关系，一个进程可以对应多个域 在此情况下，可将进程的运行分为若干个阶段，其每个阶段联系着一个域，这样便可根据运行的实际需要，来搞定在进程运行的每个阶段中所能访问的对象 把这种一对多的联系方式称为动态联系方式，在采用这种方式的系统中，应增设保护域切换功能，以使进程能在不同的运行阶段，中一个保护域切换到另一个保护域 访问矩阵 可以利用一个矩阵来描述系统的访问控制，并把该矩阵称为访问矩阵 (Access Matrix) 访问矩阵中的行代表域，列代表对象，矩阵中的每一项是由一组访问权组成的 因为对象已由列显式地定义，故可以只写出访问权而不必写出是哪个对象的访问权，每一项访问权定义了在域Di中执行的进程能对对象Qj所施加的操作集。 访问矩阵中的访问权，通常是由资源的拥有着或者管理者所决定的 当用户创建一个新文件时，创建者便是拥有者，系统在访问矩阵中为新文件增加一列，由用户决定在该列地某个项中应具有哪些访问权 当用户删除此文件时，系统也要相应地在访问矩阵中将该文件对应的列撤销 计算机病毒计算机病毒的定义 计算机病毒是一段程序，它能不断地进行复制和感染其它的程序，无需人为介入便能够由被感染的程序和系统传播出去 一般地病毒并不长。对于用C语言编写的病毒程序，通常不超过一页，经编译后小于2KB；用汇编语言编写的病毒程序则更小，可以小到只有几十到几百个字节 危害 占用系统空间 占用处理机时间 对文件造成破坏 使机器运行异常 产生的原因 显示自己的能力 恶意报复 恶意攻击 出错程序 特征 寄生性 传染性 隐蔽性 破坏性 类型 文件型病毒：主动攻击型感染和执行时感染 内存驻留病毒 引导扇区病毒 宏病毒 电子邮件病毒 隐藏方式 伪装：利用文件长度发生改变来发现病毒。设计者为了隐藏病毒，通过有所技术，使感染上病毒的文件的长度与原有文件的长度一致 隐藏：病毒程序的设计者常把病毒隐藏在一个不易检查到的地方 多形态 防火墙技术用于实现防火墙功能的技术可分为两类 包过滤技术：基于该技术所构建的防火墙简单、价廉 代理服务技术：基于该技术所构建的防火墙安全可靠 两者之间有很强的互补性，因而经常同时采用这两种防火墙技术来保障网络安全 包过滤技术基本原理 置于Intranet的适当位置，通常在路由器和服务器中 对进出Intranet的所有数据包按照指定的过滤规则进行检查，仅对符合指定规则的数据包才准予通行，否则将之抛弃。 优缺点 有效灵活 简单易行 不能防止假冒 只在网络层和传输层实现 缺乏可审核性 不能防止来自内部人员造成的威胁 代理服务技术基本原理设置一个代理服务器，并将外部网(Internet)与内部网之间的连接分为两段 一段是从Internet上的主机引到代理服务器 另一段是由代理服务器连到内部网中的某一个主机（服务器） 每当主机请求时，总被送到代理服务器，并在其中通过安全检查后，再由代理服务器与内部网中的应用服务器建立连接 所有的Internet上的主机对内部网中应用服务器的访问，都被送到代理服务器，由后者去代替在Internet上的相应主机，对Intranet的应用服务器进行访问 Internet主机对Intranet应用服务器的访问，置于代理服务器的安全控制之下，使其无法了解到Intranet的结构和运行情况 应用层网关的类型代理服务技术时利用一个应用层网关作为代理服务器的 应用层网关可分为三种类型： 双穴主机网关 屏蔽主机网关 屏蔽子网网关 三种都要有一台主机，通常称为“桥头堡主机”(Bastion Host),它起着防火墙的作用，也起着Internet与Intranet之间的隔离作用 优缺点 屏蔽被保护网 对数据流的监控 实现复杂 需要特定的硬件支持 增加服务延迟 规则检查防火墙 集包过滤防火墙和应用级网关这两种防火墙技术的优点 包过滤防火墙：在网络层上通过检查IP地址等手段，过滤掉对Intranet进行访问的非法数据包 应用级网关：对服务的类型和服务信息的内容进行检查，过滤掉其中的非法访问 性能更好。为进一步提高性能，增加了用于保障网络安全的新功能 增加三种认证方法 用户认证——用于对用户的访问权限进行认证 客户认证——对用户客户机IP地址进行认证 会晤认证——审查是否允许在访问者和被访问服务器之间建立直接的连接 内容安全检查 为网络中的每个计算机站点进行病毒检查 为电子邮件服务提供安全控制的机制，该机制可以隐藏Intranet的结构和用户的真实身份等 基于FTP命令的内容安全控制，以禁止用户使用这些命令 数据加密在防火墙中提供了多种加密方案，保障Intranet中信息的安全 负载均衡在多个服务器之间实现负载的均衡，避免出现忙闲不均的现象]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>OS_Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络 数据链路层/Data Link Layer 第三章笔记]]></title>
    <url>%2F2018%2F01%2FCN-Chapter-Three%2F</url>
    <content type="text"><![CDATA[2017年10月13日11:03 写在前面本笔记仅仅是本人在上课时的一些随手记录，并不完整也不完全正确。 如有错误，请在评论中或直接联系我指正，谢谢！ 由于markdown限制，一些手写部分无法很好转换。如要获得更详细信息，请下载下面提供的mht和pdf. 原始文件下载：(mht)(pdf) 目标：提供两个相邻机器之间的可靠有效率的通信 Functions of the Data Link Layer Provide service interface to the network layer Dealing with transmission errors Regulating data flow: Slow receivers not swamped by fast senders Services Provided to the Network Layer 提供了三种服务 不确认的无连接服务（不确认的服务不可靠）应用场合 出错概率极低 要求数据实时性高 大多数局域网 确认无连接服务 不可靠信道，比如说无线系统 确认面向连接服务 WAN，点到点 三阶段： 建立连接 传输数据帧 释放连接 每一帧只会收到一次，且帧以发送顺序接收（确定连接） 收到的数据帧与转发的数据帧可能不一样比如不同端口的协议不同，需要修改格式 Framing（成帧）Character count（字符计数法） 在发送的数据帧前面加一个字节，标识数据帧的长度 缺陷： 如果数据帧长度不是字符&emsp;&emsp;只能针对以字符为整数倍成帧 字符计数位出错&emsp;&emsp;出错位之后的数据全部无法解析&emsp;&emsp;（成帧标识出错会影响后面所有数据帧的成帧） Flag bytes with byte stuffing（字符填充法）对字符计数法中第二个缺陷进行改进 Need to escape Extra ESCAPE Bytes too! Special flag bytes delimit frames; occurrences of flags in the data must be stuffed(escaped)Frames longer, but easier to resynchronize after error Example: FLAG,A,ESC,FLAG,B,FLAG 数据帧的头尾部加上标识（FLAG）ESC：转义字节，在“偶尔”出现的标志位前添加（为大数据块，比如图片等，帧分界受干扰时所设计）接收方的数据链路层在将数据传递给网络层之前必须删除转义字节PPP协议使用的略微简化形式 缺陷：只能针对以字符为整数倍成帧 Starting and ending flags, with bit stuffing（位填充法）为HDLC（高级数据链路控制）所开发USB中使用 在数据帧中进行位填充在五个连续1后加入0在接收端，每五个1后的0被删除帧标识有六个1 Physical layer coding violations（物理层违例编码法）在以太网中采用 曼彻斯特编码 前低后高：0 前高后低：1 则有两个违例编码： 低低/高高 用违例编码来表示帧始末 Error Control（错误控制）检错/纠错检错码/纠错码 检错码：高度可靠的信道/偶尔发生错误时直接重传整个数据块 纠错码：错误发生频繁的信道/接收方能够计算出原始的数据块 检错：奇偶校验码，校验和，循环冗余码 纠错：海明码（Hamming） 海明码海明距离The minimum bits flips to turn one valid codeword into any other valid one从一种有效码字转换到另外一种至少需要改变多少位（两个码字中不同位的个数） 编码在原始编码中插入检错位在所有2i的位置都是检错位 如下图，1,2,4,8在剩余位中插入原码 问题：如何确定检测位？ 编号：&emsp;&emsp;1=2^0&emsp;&emsp;2=2^1&emsp;&emsp;3=2^0+2^1 确定2^i检测位 &emsp;&emsp;2^i与编号中有2^i子项的数据，构造偶校验码 e.g：偶校验例子（和偶为0，和奇为1） 2^0子项：0 3，5，7，9，11 1，0，0，0，1 2^1子项：0 3，6，7，10，11 1，0，0，0，1 2^2子项：0 5，6，7 0，0，0 2^3子项：1 9，10，11 0，0，1 纠错Counter（计数器）&lt;—-0对所有的检测位（2^i），判断该检测位与其对应的数据位是否构成偶校验 是，计数器不变 不是，计数器+2^I 计数器值指示了错误所在位置（11，7）只能纠正一位错，检测两位错 如果连续出错，则可以将原数据分开发送 例：7个字符，横向排列编码，再竖向编码发送 奇偶校验码在数据末尾加入校验码（比如偶校验：1的个数为偶，校验位为0）单个校验位只能可靠地检测出一位错误这种错误被检测出来的概率只有0.5则将每个数据块作为一个数据矩阵处理对于大批量数据只有少数位出错的情况中，效率很高矩阵检测，则对突发连续错误的检测比较好 CRC 也称多项式编码将位串堪称是系数为0或1的多项式，进行长除发送方和接收方预先商定一个生成多项式生成多项式的最高位和最低位系数必须是1（不借位除法，可以直接理解为异或） 存传机制定时器Flow Control（流量控制）数据链路层&amp;传输层 基本数据链路层协议 协议头文件 protocol.h 一些协议（函数，事件） 在讨论协议前，需要知道，对于理想协议来说，前提十分重要 理想化单工协议 A Utopian Simplex Protocol假设 物理层，数据链路层，网络层是独立进程 单向传输 物理层服务可靠 A有无限数据准备发送 B一直准备接收 机器不崩溃 无噪声信道单工停-等协议A Simplex Stop-and-Wait Protocol for an Error-Free Channel 实现了流量控制当接收端收到数据后，发送确认帧 有噪声信道单工停-等协议不可靠的物理线路 解决方案 发送方的数据帧带有CRC 接收方通过CRC值，发送ACK或NAK（按照序列号分辨） 发送方在收到ACK之后发送新帧，若NAK或超时则重发老帧 当ACK丢失&emsp;&emsp;产生重复帧&emsp;&emsp;一个一位序列数字来区别新老帧 发送进程 接收进程 滑动窗口协议捎带Piggybacking双向发送中，在发送分组时捎带确认帧 条件：&emsp;&emsp;收到发送的数据帧&emsp;&emsp;接收方有向发送方送回的数据帧（不然发送方无法继续发送，无确认）有时Timeout重发不是因为发送错误，而是因为接收方没有数据发送，而无法捎带确认为避免上述情况，引入（ack_Timer） 分组 From_network_layer() 网络层 分组 To_network_layer() 数据链路层 帧 To_physical_layer() 帧 From_physical_layer() 物理层 发送端给接收端发送包F0，接收端可能： CRC检测出错&emsp;&emsp;接收端发送确认错误帧让发送端重发F0（1） 在传输中丢失此包&emsp;&emsp;接收端无回复确认帧，接收端等Timeout之后重发F0(1) 正确到达，发送确认帧，确认帧可能： 在传输中丢失此包&emsp;&emsp;发送端Timeout，重发 正确到达&emsp;&emsp;完成一次成功传输 停等协议流程图 停等协议线路利用率 1位滑动窗口协议 数据传输双向 捎带 滑动窗口 序列号 大小 上边界指针，下边界指针（决定窗口大小） 发送窗口 帧已发送但未收到确认帧 缓存这些确认帧（缓冲区） 发送新数据帧，上界指针+1 收到确认桢，下界指针+1 上下界指针变更不同步 接收窗口 可接收的帧 上下界指针同步变更 以圆盘表示滑动窗口，序列号几位决定扇形区域多少 当窗口大小=1（目前的例子），接收数据帧的顺序与发送数据的顺序一致 而大小&gt;1，可以不一致（选择性存传协议） 实际上还是停等协议，只不过双工 区分主从站点，从站点协议中没有第一次发送过程（to_physical_layer(&amp;s);start_timer(s.seq);） 原因：会导致第一次发送时，发送站点浪费一次发送 利用率和停等协议相当 回退N帧协议 利用率 up 适用场合 出错率低 发送窗口大小 0~2n-1 接收窗口大小 1 收到n号确认—->n号到发送窗口下界指针的帧都被确认 当出错数据帧发生定时时间溢出，指针回退到出错数据帧，重发到上边界指针 选择性存传协议 利用率 up 适用场合 出错率高 发送窗口大小 0~2n-1 接收窗口大小 2n-1 n为序列号位数接收窗口指针同步滑动下界指针只会收到时滑动发送端等收到确认帧之后再发下一帧 Example Data Link ProtocolsHDLC高级数据链路控制协议 全双工 滑动窗口协议 面向连接的可靠传输 无序号帧用于链路连接的建立、维护和拆除 信息帧用于发送数据并实现捎带的帧确认 监控帧用于告诉对方数据帧传输出错并同时给出建议的差错控制方式 P/F用来指示此帧是否为本次传输最后一帧 PPPPPP架构 PPP帧格式 面向字符，字符填充成帧 会话建立过程 链路的建立和配置协调 链路质量检测 网络层协议配置协调 关闭链路]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Computer_Network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络 物理层/Physical Layer 第二章笔记]]></title>
    <url>%2F2018%2F01%2FCN-Chapter-Two%2F</url>
    <content type="text"><![CDATA[2017年9月20日08:54 写在前面本笔记仅仅是本人在上课时的一些随手记录，并不完整也不完全正确。 如有错误，请在评论中或直接联系我指正，谢谢！ 原始文件下载：(mht)(pdf) Synchronous(同步) 有一个基准时钟信号 synchronous(异步) 没有基准，当需要传输信号时即传输 异步传输：适合低速通讯 模拟通信系统在模拟信号的基础上加入编码器和译码器（信源信道个需要一个） 数字通信系统在模拟信号的基础上加入编码器和译码器（信源信道个需要一个） 数据传输的理论基础傅里叶分析有限带宽信号 谐波数选取越多，傅里叶分析之后得到的结果失真越小 （一般来说谐波数>=4） 信道的最大数据传输率Concepts: Bandwidth: the range of frequency带宽，又叫频宽，是数据的传输能力，指单位时间按内能够传输的比特数。数字设备中带宽用bps表示，模拟设备中用Hz表示 Symbol（码元）: one piece info., a sample（一个波特即为一个码元） Baud rate (RB 波特率): The number of changes in the signal per second, number of sample/sec, symbol rate波特率，又称调制速率、传符号率（符号又称单位码元），指单位时间内载波参数变化的次数，可以以波形每秒的振荡数来横梁，是信号传输速率的度量。 Bit Rate (Rb 比特率): number of symbol/sec times number of bits/symbol码元速率和信息速率的关系式为：Rb=RB*log2(N)。其中，N为进制数 理想低通信道最高RB=2H Baud。每秒2码元信号所有低频分量，只要频率不超过上限，则可不失真传输。 理想带通信道：最高码元传输速率则是：RB=H Baud。每秒1码元带通：只允许上下限之间信号频率成分不失真的通过 公式： Nyquist’s theorem任意信号通过一个带宽为B的低通滤波器，那么只要进行每秒2B次（确切）采样，就可以完全重构出被过滤的信号。高于2B毫无意义 maximum data rate = 2H log2 V bits/sec&emsp;V：信号有V个不同离散等级 Shannon’s theoremmaximum data rate = Hlog2 (1+S/N) bits/sec S/N：10log（S/N）=dB 10，10 100，20 例子：若现V=2，H=3000尼奎斯特： Rmax=2*Hlog2(V)=6kbps Shannon: Rmax=30Kbps 则取最小值 信号传输介质双绞线绞数越多，频繁，传输速率越快 同轴电缆： 基带同轴电缆 宽带同轴电缆中继器，在信号衰减严重之前对信号进行重新整形 铜芯、绝缘材料、导体网、保护性塑料套 电力线问题：不同情况所采用的电线性质可能不同，高频信号衰减严重，且还未有国际标准 光纤：（单工） 单模，多模光纤 光纤的规格通常用玻璃芯与覆层的直径比值来表示。 单模光纤的传输率较高，但比多模光纤更难制造，价格更高。 光纤信号计算问题 Δλ：波长，波宽 Δf：频宽 Solution: The data rate is 1024 ×768 ×24 ×60 bps, which is 1080 Mbps. For simplicity, let us assume 1 bps per Hz. we get Δ λ =λ^2 Δ f /c. We have Δ f = 1.08 ×10^9 , so Δ λ=6.08 ×10^(-10) microns. The range of wavelengths used is very short. 光源LED性能差寿命长使用环境不严苛半导体激光相反 Wireless Transmission无线电传输 电磁频谱 光波通信 只能直线 有水蒸气的时候会影响通信 通信卫星 低频段受干扰小，但是带宽小，比较拥挤 高频段带宽大，但是受干扰大，会受到降雨等因素干扰 PSTN (Public Switched Telephone Network) 信号调制 角度为相位，距离为振幅。对不同信号加载不同信号可以实现一个周期内传输多位数据 在带宽较小的情况下提高数据传输速度 基带传输(Baseband transmission) P98 四种不同编码方式： NRZ （Non-Return to Zero） NRZI （NRZ Revert） Manchester AMI 编码名称 编码规则 不归零码 Nonreturn-to-Zero-Level(NRZ-L) 0 = 低电平 1 = 高电平 反向不归零码 Nonreturn to Zero Inverted(NRZI) 0 = 间隔(一个bit的时间)起始处无变化 1 = 间隔起始处有变化 双极-AMI码 0 = 无信号 1 = 正、或负电平,每一连续的1交变 Manchester编码 0 = 间隔的中央处从低到高变化 1 = 间隔的中央处从高到低变化 差分 Manchester编码 间隔的中央处总有变化 0 = 在间隔起始处变化 1 = 间隔起始处无变化 NRZI编码方式会遇到一个严重问题，当连续发送多位“0”或“1”信号时，会造成数据信号长时间无法翻转，使读取的时序发生严重错误（接收端时钟与发信端时钟会有误差）。因此，在NRZI编码之间还需执行所谓的位填充的工作。 四五位编码 有意识地让一段数据一定会产生电平跳变（浪费25%带宽）（保证传输准确性） DSL（Digital Subscriber Lines）数字用户环线 带宽会因为传输距离而衰减 上图为三类UTP数值 ADSL 非对称 多路复用 把许多信号在单一地传输线路和用单一的传输设备来进行传输的技术。 在语音信号中，比如有三路不同语音信号将这三路信号升频，进入三个不同的频率段 频分复用(FDM) 上述方法固定频率段，但是无法控制不同频率段使用效率的差距问题 信号并行发送 时分复用(TDM)用户以循环的方式轮流工作。每个用户周期性地获得整个带宽非常短的一个时间 信号串行发送 波分复用把频分的频率看成波长（光信号） PCM (Pulse Code Modulation)Nyquist theorem: Making 2N samples per second from N hz bandwidth is sufficient to capture all the information Telephone system: 8000 samples from 4khz channel, 125us/sample, 7 or 8 bit/sample 简单的采样量化过程 增量调制（Delta Modulation）一种差分编码，减少了一个通道所需要的比特位数 Delta 1bit Differential 5bits 一般 将多路T1复用到更高的带宽中 Switching/交换 电路交换 报文交换 分组交换 电路交换&amp;分组交换交换机收到一个分组之后就可以向下传递，不需要等待所有分组全部收到 电路交换：时延主要在寻找中继线的时候，线路延时较小 分组交换：分组较一大块数据块小很多，不需要等待则时延小一些 比较： Congestion 拥塞：当线路利用率达到某一个临界值时，线路将会被堵塞如果继续按照原有的速率发送数据包，则数据包会发生拥塞在此情况下数据包会遭到破坏解决方法：将发送端加载数据包的速度降低拥塞策略 移动电话系统AMPS/GSM/UMTS/LTE AMPS（1G）语音仍模拟传输信号调制基于频率 每段频率段各不相同，A~F 每个区域分为七个小区域，分别部署七个不同频率段 再将每个区域细分到832个（全双工）信道，其中有四类： 控制信道用于管理系统（基站到移动电话） 寻呼信道用于提醒用户有呼叫到来（基站到移动电话） 计入（Access）信道用于呼叫的建立和信道分配（双向） 数据信道承载语音、传真或数据（双向） 发送信道（移动电话到基站）824~849MHz（单工）832个信道接受信道（基站到移动电话）869~894MHz（单工）832个信道 D-AMPS（2G）数字传输TDM帧 GSM（2G）FDM多频道，TDM单帧 信号调制基于QPSK（正交相移键控） UMTS（2G）信号调制基于CDMA（3G）多路信号同时占用整个带宽传输 如何从合成信号中分解单路信号？ 芯片码（正交）站点发送 芯片码“1” 芯片码的反码“0” 合成信号·发送站芯片码/码长=+1/-1/0（信号还原）通过基站交换双方的芯片码 LTE（4G）OFDM（正交频分多路复用） Review2.1 The theoretical basis for data communication Bandwidth analysis (综合分析) The maximum data rate of a channel (综合分析) 2.2 Guide transmission media （了解）2.3 wireless transmission（理解） Light wave transmission （理解） 2.4 Communication satellites （了解）2.5 The public switched telephone network （理解） Structure of the telephone system The local loop: Modems Trunks and Multiplexing Switching 2.6 the mobile telephone system GSM and CDMA (综合分析) 2.7 cable television（了解） gtmd作业 2.3，2.4，2.5，2.7，2.10，2.19，2.21，2.25，2.26，2.28 ，2.44 ，2.48, 2.50 2.3 If a binary signal is sent over a 3-kHz channel whose signa-to-noise ratio is 20dB, what is the maximum achievable data rate? 2.4 What signal-to-noise ratio is needed to put a T1 carrier on a 100-kHz line? *2.5 What are the advantages of fiber optics over copper as a transmission medium? Is there any downside of using fiber optics over copper? 2.6 How much bandwidth is there in 0.1 microns of spectrum at a wavelength of 1 micron? 2.7 It is desired to send a sequence of computer screen images over an optical fiber. The screen is 1920x1200 pixels, each pixel being 24 bits. There are 50 screen images per second. How much bandwidth is needed? 2.10 Radio antennas often work best when the diameter of the antenna is equal to the wave-length of the radio wave. Reasonable antennas range from 1cm to 5 meters in diameter. What frequency range does this cover? 2.19 Is an oil pipeline a simplex system, a half-duplex system, a full-duplex system, or none of the above? What about a river or a walkie-talkie-style communication? 2.21 A modem constellation diagram similar to Fig. 2-23 has data points at (0,1) and (0,2). Does the modem use phase modulation or amplitude modulation? 2.25 Ten signals, each requiring 4000 Hz, are multiplexed onto a single channel using FDM. What is the minimum bandwidth required for the multiplexed channel? Assume that the guard bands are 400 Hz wide. 2.26 Why has the PCM sampling time been set at 125 μsec? 2.28 Compare the maximum data rate of a noiseless 4-kHz channel using (a) Analog encoding (e.g., QPSK) with 2 bits per sample (b) The T1 PCM system 2.44 A CDMA receiver gets the following chips:(-1 +1 -3 +1 -1 -3 +1 +1). Assuming the chip sequences defined in Fig. 2-28(a), which stations transmitted, and which bits did each one send? 2.48 A cable company decides to provide Internet access over cable in a neighborhood consisting of 5000 houses. The company uses a coaxial cable and spectrum allocation allowing 100Mbps downstream bandwidth per cable. To attract customers, the company decides to guarantee at least 2Mbps downstream bandwidth to each house at any time. Describe what the cable company needs to do to provide this guarantee. 2.50 How fast can a cable user receive data if the network is otherwise idle? Assume that the user interface is (a) 10Mbps Ethernet (b) 100Mbps Ethernet (c) 54Mbps Wireless]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Computer_Network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络 序言/Introduction 第一章笔记]]></title>
    <url>%2F2017%2F12%2FCN-Chapter-One%2F</url>
    <content type="text"><![CDATA[2017年9月13日08:08 写在前面本笔记仅仅是本人在上课时的一些随手记录，并不完整也不完全正确。 如有错误，请在评论中或直接联系我指正，谢谢！ 原始文件下载：(mht)(pdf) P2P peer-to-peer 对等（no fixed clients and servers/地位平等）*：进程 计算机系统 实体 计算机网络对于P2P，实体皆对等 每层协议实体对等 一个商业应用的典型例子 对于这样的架构，计算机网络需要对所有请求和回复数据包做处理 网络分类计算机网络传输技术：（Broadcast Networks 广播式网络） 广播式联接 broadcast links /卫星网络 局域网 点-点联接 Point-to-point links （子网）*：以上技术和网络安全性无关不影响网络安全性 对网络规模的分类：P18PAN/ LAN/ MAN/ WAN/ The Internet 局域网（LAN）拓补结构： 主线式（常用） 一台机器损坏不会影响整个网络 环状 环中任一机器损坏会导致令牌(token)传输出现问题 城域网（MAN） 有线电视 广域网（WAN） 由若干LAN构成，而中间由子网来构建通讯（子网和主机） 子网内数据传输：点对点局域网内：广播 局域网之间互联：局域网主机广播至路由器端口，路由器通过子网转发给另一个路由器，再由另一个路由器广播至另一局域网主机 存储/转发 解决可能的不同线路特征问题，比如带宽差距 检测分组可能存在的错误，屏蔽并重新请求 决定向谁转发 与以上种类网络不同，还有一种网络为直通式网络，即对所有分包不做任何处理直接传输 网络软件（应用） Connection-Oriented and Connectionless Services Service Primitives The Relationships of Services to Protocols 网络体系结构完成计算机之间的通信合作，把每个计算机互联的功能划分成有明确定义的层次，并规定同层次进程通信的协议及相邻层之间的接口服务 协议（protocol）：协议就是为实现网络中的数据交换建立的规则标准或约定。协议由语法、语义和交换规则三部分组成，即协议的三要素。 接口（interface）：分层结构中各相邻层之间要有一个接口，它定义了较低层向较高层提供的原始操作和服务。相邻层通过它们之间的接口交换信息，高层并不需要知道低层是如何实现的，仅需要知道该层通过层间的接口所提供的服务，这样使得两层之间保持了功能的独立层通过它们之间的接口交换信息，高层并不需要知道低层是如何实现的，仅需要知道该层通过层间的接口所提供的服务，这样使得两层之间保持了功能的独立 层设计的问题 Addressing 寻址 Error Control 错误控制 Flow Control 流量控制 Multiplexing 复用技术 Routing 路由 寻址&emsp;&emsp;IP地址，MAC地址 错误控制（非可靠） 检错 海明码 CRC 纠错 纠错码 重传 流量控制当发送速率和接收速率的速度不一致，若不进行流量控制，则会产生信息淹没方式： 基于速率 基于反馈（本课程） 在一个数据单元结束做标识，接收设备得到标识符之后发送给发送端信号 \第三章* 线路利用率下降 复用技术 频分 时分（波分） CDMA 面向连接和无连接服务面向连接Like the phone system 三阶段 Connection Setup Data Transfer Connection Termination 发送数据和接收数据的顺序一致发送数据的路径一致 发送数据头部（连接号：ID）*第五章，第六章 无连接Like the post office Each message has the entire address on it 发送报文必须包含完整地址信息 Each message may follow a different route to its destination 报文独立进行路由 各报文传输路径可能不一致 Data Transfer 发送接收顺序可能不一致 DNS 域名解析：面向连接 域名映射表：无连接 服务及例子 服务原语 参考模型/Reference Models The OSI Reference Model The TCP/IP Reference Model A Comparison of OSI and TCP/IP A Critique of the OSI Model and Protocols A Critique of the TCP/IP Reference Model OSI/RM 开放系统互连参考模型 物理层 确保发送端发送的数据和接收端解析出的数据一致 表示1，0 传输同步性(Transmission simultaneous *第二章) 连接建立和结束 网络连接器 物理传输介质 数据链路层对传输错误的处理（屏蔽）使得其上层网络层看不到传输错误 （*第三章） 发送端将数据分成数据帧，再按顺序传输这些帧 返回确认帧（Acknowledgment frame） 流量控制 避免一个快速发送方用数据淹没一个慢速接收方 广播式网络：共享信道访问控制 网络层 将分组packets从源端路由到目标端 拥塞（congestion）处理 服务质量 异构（Heterogeneous）网络互联 传输层 接收来自上一层的数据，在必要的时候把这些数据分割成较小的单元，然后把这些数据单元传递给网络层，确保数据单元正确地到达另一端 高效率地以上下隔离的方式完成 决定了向会话层，因而是实际的最终网络用户提供哪种类型的服务 真正的端到端的层 屏蔽网络层属性 用户不关心网络层结构 第1~3层是链式连接的，而第4~7层是端到端的 会话层允许不同机器上的用户建立对话对话控制令牌管理同步功能 表示层语法，句义（加密等） | 应用层包含了用户通常用到的各种各样的协议&emsp;&emsp;HTTP等 TCP/IP的体系结构 链路层链路必须完成什么功能才能满足无连接的互联网络层需求（不是真正意义上的一个层，而是主机与传输线路之间的一个接口） 互联网层 分组到达接收端的顺序可能不一致（无连接服务） 将分组独立进行路由到达目标端 IP/ICMP … 传输层 端到端协议TCP UDP TCP Transmission Control Protocol 面向连接，可靠服务 UDP User Datagram Protocol 无连接，不可靠服务 应用层包含所需的任何会话和表示功能 主机-网络层不是独立层 OSI与TCP/IP比较相似点 基于相似的概念——独立协议的堆积 分层的功能几乎相似 不同点：OSI： 对服务，接口和协议有良好定义 与面向对象（OO）的编程思想相吻合协议隐藏性更好 TCP： 协议为先；模型只是协议的一个描述。然而模型对其他的协议都不大吻合 TCP/IP模型并未清晰地区分服务，接口和协议* 本书所采用的模型是一个混合模型：* 网络实例因特网 3G移动电话网络 由于3G网络的频谱稀缺，导致网络之间的干扰成为一个严重问题 解决问题的一个方法是将基站分布成为蜂窝状（每个相邻区域使用不同频率段）： 与因特网的不同点： 体系结构：UMTS 移动性：当用户移动出一个蜂窝基站的覆盖范围进入到另一个蜂窝基站的覆盖范围时，数据流必须从旧蜂窝基站重新路由到新蜂窝基站。（handover, handoff）无线网络：802.11 802.11/(WiFi)的体系架构 *RFID与传感器网络 网络标准化ITU，ISO，IETF，IEEEITU（International Telecommunication Union）]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Computer_Network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统概念 进程同步/Process Synchronization 第六章笔记]]></title>
    <url>%2F2017%2F12%2FOS_Concept_Chapter_Six%2F</url>
    <content type="text"><![CDATA[2017年10月24日09:53 写在前面本笔记仅仅是本人在上课时的一些随手记录，并不完整也不完全正确。 如有错误，请在评论中或直接联系我指正，谢谢！ 原始文件下载：(mht)(pdf) 进程同步 并发进程之间相互合作、互相约束 利用私用信号量实现 进程互斥(exclusion) 并发进程之间互相竞争临界资源的排他性关系 利用公用信号量实现互斥 互斥源于资源共享，是进程之间的制约关系 BackgroundConcurrent access to shared data may result in data inconsistencyMaintaining data consistency requires mechanisms to ensure the orderly execution of cooperating processes 生产者进程—->buffer—->消费者进程 保持数据稳定性 维护一个整数计数器，追踪满缓存数量 初始设为0 被生产者增加，每提供一个新缓存+1 被消费者减少 由于count没有在生产者和消费者之间同步，生产者和消费者进程会交替执行，而count一直被调去却未返回维护，导致生产者和消费者的寄存器中代表count的寄存器值不同 竞争条件 多个进程并发访问和操作统一数据 执行结果与访问发生的特定顺序有关 为避免，需要确保一段时间内只有一个进程可以操作变量，所以需要进程之间的同步与协调 临界区问题Critical Section/进程互斥临界区：进程访问临界资源的那段代码 解决互斥方法： 软件 硬件 临界资源 又被称为互斥资源(exclusive resources) 这些系统资源每次只能被一个进程使用 临界区 又被称为互斥区(exclusive section) 访问临界资源的代码段 解决问题每个进程必须在进入临界区之前寻求许可 （特别是在抢占式内核中，实现方式很有挑战性） 进入区entry section 退出区exit section 代码中的其余部分remainder section 临界区的访问规则互斥/mutual exclusion当进程i正在临界区，其他进程都不能访问他们的临界区 前进Progress如果 无进程在临界区 存在进程希望进入临界区 那么，选定的进程进入临界区 进程不能被无限推迟 有限等待Bounded Waiting不会有饥饿现象 有空让进，无空等待，多中择一，有限等待，让权等待 基本思路 在进入区检查设置一些标志 进入区循环检查进行等待 退出区修改标志 问题：设置什么标志，如何检查标志 算法1：单标志位 设置变量turn 进循环前查值（空等待） 进循环后改变值 顺序：1，2，1，2，1，2… 缺点：&emsp;&emsp;进程强制轮流进入临界区，容易造成资源利用不充分 e.g:&emsp;&emsp;Pi让出临界区之后，Pj使用临界区之前，Pi不可能再次使用临界区 算法2：双标志位（先检查）标志数组flag[]：描述进程是否在临界区，初值均为FALSE 先检查，后修改 解决了顺序固定的问题 缺点：可能同时进入临界区&emsp;&emsp;检查对方flag之后和切换自己flag之前有一段时间，结果都检查通过。 检查和修改操作不能连续进行 算法3：双标志（先修改） 缺点：可能都无法进入临界区 实例：Peterson算法将1与3相结合 维护两个变量，turn和flag[] 互斥被保护，进程申请可以通过，有限等待也得以满足 缺点： 忙等待 实现复杂，需要比较高的编程技巧（本实例仅提供双进程方案） Process Synchronization同步机制&emsp;&emsp;从进程管理者的角度来处理互斥同步问题 信号量表示资源的实体，是一个与队列有关的整型变量123456struct semaphore&#123; int value; pointer_PCB queue; //阻塞在该信号量的各个进程的标识 &#125; 操作：初始化，P/V原语(Wait &amp; signal)不受进程调度的打断公用信号量初值为1私用初值为0或某个正整数 信号量取值 非负：空闲资源数 负：等待临界区进程数 P/V操作P操作P(S)申请分配一个单位的资源 V操作V(S)释放一个单位的资源 关于… 优缺点： 简单，表达能力强 不够安全，使用不当会出现死锁 遇到复杂同步互斥问题实现比较难 应用：实现互斥引入mutex信号量，初值为1 同步：PV分别位于两个不同进程互斥：在一个进程中 例1：读者、写者问题 例2：生产者、消费者问题 先检查资源数目，再检查互斥（避免死锁） 所有访问缓冲区的申请互斥生产者消费者同步 哲学家进餐问题 Sleeping Barber]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>OS_Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统概念 CPU调度/CPU Scheduling 第五章笔记]]></title>
    <url>%2F2017%2F12%2FOS_Concept_Chapter_Five%2F</url>
    <content type="text"><![CDATA[2017年10月12日08:01 写在前面本笔记仅仅是本人在上课时的一些随手记录，并不完整也不完全正确。 如有错误，请在评论中或直接联系我指正，谢谢！ 原始文件下载：(mht)(pdf) Basic ConceptsMaximum CPU utilization obtained with multiprogramming CPU-I/O Burst Cycle（突发时间）Process execution consists of a cycle of CPU execution and I/O wait I/O bound: I/O↑ CPU↓ CPU bound：I/O↓ CPU↑ 进程调度的关键在长期调度中协调I/O bound与CPU bound CPU调度Selects from among the processes in memory that are ready to executeAllocates the CPU to one of them 调度Review Non-preemptive（非抢占方式）Scheduling take place when a process: Terminates Switches from running to waiting(I/O requests) Some kind of primitive is executed in process communication orsynchronization, such as Block primitive（阻塞原语）,Wakeupprimitives（唤醒原语） Preemptive（抢占方式）允许打断正在运行中的进程 Scheduling take place when a process: Running to ready Waiting to ready Causes Access to Shared data While in kernel mode Interrupts occurring during crucial OS activities Dispatcher（进程调度程序）将cpu的控制权分配给process Tasks: Switching context To user mode Jumping to the proper location in their user program to restart that program Dispatch latency Stop one process and start another running Scheduling CriteriaGeneral Criteria CPU utilization Throughput Number of Processes that are completed per time unit Turnaround time Time spent waiting to Get into memory Waiting in the ready queue Executing on the CPU Doing I/O Long-term Scheduling Waiting time Time that a process spends waiting in the ready queue Response time From the submission of a request until the first response is produced Interactive system Optimization Criteria Max CPU utilization Max throughput Min turnaround time（轮转时间） Min waiting time Min response time Scheduling Algorithms*FCFSFirst-come, first-servedAverage waiting time is often quite long.适合处理长调度，有利于长作业Convoy effect（护航效应）&emsp;&emsp;short process behind long process SJFShortest-job-first（SJF）（非抢占）对于抢占，非抢占 抢占效果更优 抢占：SRTF Optimal - gives minimum average waiting time for a given set of processes The difficulty is knowing the length of the next CPU request Could ask the user 预测下一个CPU burst time指数平均 Tn= actual length of nth CPU burst α->0&emsp;&emsp;History not count α->1&emsp;&emsp;Only the actual last CPU burst counts 算法易于实现，但是效率不高 缺点 忽略作业等待时间 会出现饥饿现象（大作业很难执行） 比较SJF的平均作业周转时间比FCFS要小，所以它的调度性能比FCFS好 SJF调度算法问题需要知道作业所需运行时间，否则调度就没有依据，不可能精确计算出运行时间（即难点为预测下一个作业时间片长度） Priority Scheduling数字越小，优先级越高 SJF: Priority is the predicted next CPU burst time Starvation:&emsp;&emsp;Low priority processes may never execute Solution:动态调整优先级，Aging —- as time progresses increase the priority of the process 静态优先级 动态优先级 高响应比优先调度HRRF响应比：作业等待时间与运行时间比值响应比=（等待时间+要求服务时间）/要求服务时间 缺点： 响应比计算增加了系统开销 Round-Robin Scheduling 轮转算法将cpu时间分为确定的时间片，每个作业不得超过这个固定时间若单个任务超过这个时间，则按时间片划分，按FIFO处理（ready queue）时间片不能太长，不然会退化成FCFS时间片不能太短 负载严重 吞吐量受影响 平衡短作业的性能和长作业的吞吐量 10-100ms 上下文切换：0.1-1ms 1%的负载是上下文切换 Multilevel Queue Scheduling每个队列有自己的调度算法 Multilevel Feedback Queue 队列之间必须有调度，采用固定优先级抢占调度 进程可以在队列之间移动，借助aging实现 Definition 分为前台foreground process和后台background process 前台交互，后台批处理 80%(time) foreground RR 20% background FCFS Feedback Queue 根据时间推移，动态改变作业所在的队列 Number of queues Scheduling algorithms for each queue Method used to determine when to upgrade/demote a process Method used to determine which queue a process will enter when that process needs service Algorithm for a particular systemMultiple-Processor SchedulingSMP / Asymmetric multiprocessing Load Balancing SMP: keep the workload balancesone or more processors sit idle, others high workload(bad) Pull 空闲cpu从繁忙cpu中获取一个进程 Push 繁忙cpu队列把一个进程推送到空闲CPU队列中 Real-Time Scheduling硬实时硬件实现 CPU运算周期按照原先设定的标准（比如Time Slice） 或按照某些硬件优先权分配 软实时 对非实时的操作系统进行某些改动，达到近乎实时的效果 用一个专门的软件部件，达到快速反应 这个进程的优先级相当高 Thread SchedulingLocal SchedulingHow the threads library decides which thread to put onto an available LWP Global SchedulingHow the kernel decides which kernel thread to run next PCS&amp;SCS PCS进程竞争范围 SCS系统竞争范围 先PCS，再通过LWP放到SCS，再放到CPU Solaris 2 Real time System Interactive &amp; time sharing Scheduling evaluationDeterministic modeling Queuing models Implementation/simulation]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>OS_Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统概念 线程/Thread 第四章笔记]]></title>
    <url>%2F2017%2F12%2FOS_Concept_Chapter_Four%2F</url>
    <content type="text"><![CDATA[2017年9月27日17:44 写在前面本笔记仅仅是本人在上课时的一些随手记录，并不完整也不完全正确。 如有错误，请在评论中或直接联系我指正，谢谢！ 原始文件下载：(mht)(pdf) 提高系统运行效率相比进程更加轻量化 对于任务切换：每次分配资源越多越好，避免频繁分配每次调度的基本单位越小越好 对于上图，显然B效率更高 Main ideaSeparate the allocation and scheduling of the process resourceThe concept of threads is introduced. 目的：一次性分配充足资源——避免频繁分配资源降低调度单位，提高并发性 原因：系统开销切换线程比进程所需时间少很多 通讯 进程间通讯费时且不便利 统一进程下线程交换信息高效便捷 定义：线程 有时称轻量进程 进程中的一个运行实体 是一个CPU调度单位 资源的拥有者是进程或称任务 可由内核控制，也可由用户控制也描述为： 进程的执行体、一个执行单元、进程内的一个可调度实体等。 基本不拥有系统资源，存取所在进程的内存和其他资源只包含一些如程序计数器，寄存器和一组栈TCB（线程控制块） 不运行时保存上下文 TCB： CPU执行状态：寄存器，PC，堆栈指针 调度信息 统计信息 队列指针 多线程实现机制用户级线程 通过库函数直接编程，对程序员友好(Pthread) 仅存在于用户空间中 许多功能无需系统调用，切换无需内核管理，切换规则简单 优点 不调用内核 调度由应用程序特定：可以选择最好的算法 可以运行在任何操作系统上（只需线程库）（可移植性） 缺点 许多系统调用形成阻塞 统一进程中两个线程不能同时运行于两个处理器上 只适合单CPU 内核级线程优点 可调度一个进程中的多个线程，可同时再多核cpu上运行 其中一个阻塞不影响其他线程 内核本身可以以线程方式实现多处理器的处理功能，内核可以同时调度同一进程的多个线程 阻塞是在线程一级完成 内核例程是多线程的 缺点 线程调度在内核态下运行，应用程序在用户态下运行 控制过程中需要内核态和用户态的两次模式切换 同一进程内的线程切换调用内核，导致速度下降 模型：多对一 一般在不支持内核级进程的机器上运行 线程管理在用户空间完成，所以它的效率比较高。 如果一个线程调用了导致阻塞的系统调用的话，那么将阻塞整个进程。 一对一 保持了更好的并发性 创建内核线程的开销会加重应用程序的负担，所以这种模型的大多数实现都要限制系统支持的线程数量。 多对多 集合了上两者的优点 然而对操作系统的实现上会比较复杂困难 多对多模型将用户级线程多路映射到内核线程，映射的内核线程数量可以与之相等或更少。 多对一模型允许开发者创建任意多个用户线程。但是，因为内核一次只能调度一个线程，所以并不能获得真正的并行性。 轻量级进程（LWP）是一种实现多任务的方法。与普通进程相比，LWP与其他进程共享所有（或大部分）它的逻辑地址空间和系统资源 与线程相比，LWP有它自己的进程标识符，优先级，状态，以及栈和局部存储区，并和其他进程有着父子关系； LWP的一个重要作用是提供了一个用户级线程实现的中间系统。LWP可以通过系统调用获得内核提供的服务，因此，当一个用户级线程运行时，只需要将它连接到一个LWP上便可以具有内核支持线程的所有属性。 进程库给程序员提供API来创建管理线程 有两种主要实现方式 把库完全放在用户空间 OS支持的内核级库]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>OS_Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统概念 进程/Process 第三章笔记]]></title>
    <url>%2F2017%2F12%2FOS_Concept_Chapter_Three%2F</url>
    <content type="text"><![CDATA[2017年9月20日13:56 写在前面本笔记仅仅是本人在上课时的一些随手记录，并不完整也不完全正确。 如有错误，请在评论中或直接联系我指正，谢谢！ 原始文件下载：(mht)(pdf) Notion of processVarious features of processescommunication Main Problems1. process vs. program2. pcb 分配资源 初始化pcb3. process fork() 创建，删除 进程树 状态图 动作/操作 4. Scheduling: Short term Medium term Long term 5. Communication6. Process context Process Concept Process Defintion Process State Process Control Block (PCB) Problems for Process ManagementDispatch CPUAllocate resource (deadlock hungry) Implement the process communication Process Definition Process —- a program in execution; process execution must progress in sequential fashion 一个具有独立功能的程序在一个数据集合上的一次动态执行过程 Process includes Program counter Stack Data section *heap Process in Memory 一些进程概念和特性： 真实描述任务的并发执行 进程由程序和数据两部分组成 进程是动态的 一个程序对应多个进程 进程具有创建其它进程的功能 进程特征： 结构特征：程序段、数据段、PCB 动态性：程序的一次执行过程 并发性：多个进程同存于内存中，在一段时间中同时运行 独立性：进程独立运行、独立分配资源的基本单位 异步性：独立、不可预知 交互性：需要交互 Process State 注意进程和程序的联系与区别 PCB(Process Control Block)Content(Brief) Process state Program counter CPU registers CPU scheduling information Memory-management information Accounting information I/O status information 表本身…系统把PCB组织在一起，并放在内存固定区域，构成PCB表 链表 索引表 PCB表的大小决定了系统中最多可同时存在的进程个数，称为系统的并发度 PCB组织方式 — 链接方式 PCB组织方式 — 索引方式 PCB内容： 进程标识符、处理机状态、进程调度信息、进程控制信息 进程标识符 内部标识符：操作系统赋予，一个进程的序号 外部标识符：由创建者提供，由字母、数组组成。由用户（进程）在访问该进程时使用。 处理机状态寄存器中内容 通用寄存器 指令计数器：存放了要访问的下一条指令的地址 程序状态字PSW：状态信息，（条件码、执行方式、中断屏蔽标志） 用户栈指针：存放过程和系统调用参数及调用地址。栈指针指向该栈的栈顶 进程调度信息： 进程状态 优先级 其他信息：与进程调度算法有关 事件：进程由执行状态转变为阻塞状态所等待发生的事件、即阻塞原因 进程控制信息： 程序和数据的地址 进程同步和通信信息：消息队列指针、信号量等（可能全部或部分在PCB中） 链接指针：当前进程PCB所在队列中下一个进程PCB地址 CPU Switch 所谓上下文CPU Switch From Process to Process Process SchedulingObjective: Maximize CPU usage Quickly switch processes onto CPU for time sharing Process Scheduler Select processes for next execution on CPU Maintains scheduling queues of processes Job queue Ready queue Device queue Short-term Mid-term Long-term 进程上下文：进程执行活动全过程的静态描述 计算机系统中执行该进程有关的各种寄存器的值 程序段在经过编译之后形成的机器指令代码集（正文段）、数据集 各种堆栈值 PCB结构 进程操作：进程创建：父进程创建子进程，创建了一个进程树通常来说，以进程标识符（pid）标识 资源共享：（三种情况） 父进程子进程共享所有资源 子进程分享父进程的资源子集（一部分） 父进程和子进程不分享资源 执行（两种） 父进程子进程同时执行 父进程等待子进程结束 命名空间 子复制父 子加载了程序 UNIX例子 Fork()创建 Exec()替代fork()所创建进程（用新程序覆盖内存空间） 过程： 申请空白PCB。 为新进程分配资源。 初始化进程控制块。 将新进程插入就绪队列，如果进程就绪队列能够接纳新进程，便将新进程插入就绪队列。 进程结束/终止Process executes last statement and asks the operating system to delete it (exit) Output data from child to parent(via wait) Process’ resources are deallocated by operating system Parent may terminate execution of children processes (abort) Child has exceeded allocated resources Task assigned to child is no longer required If parent is exiting Some operating systems do not allow child to continue if its parent terminates All children terminated - cascading termination(级联终止) 进程的挂起与激活Pending 出现了进程挂起的事件 比如，用户进程请求将自己挂起 或父进程请求子进程 suspend() Activation 出现了进程激活的事件 Active() 进程交互（通信）IPC Shared memory共享存储器 Message passing消息传递 Pipe管道 Shared memory Message passing 消息传递机制都是用得最广泛的一种进程间通信的机制。 在消息传递系统中，进程间的数据交换，是以格式化的消息(message)为单位的； 程序员直接利用系统提供的一组通信命令(原语)进行通信,大大减化了通信程序编制的复杂性，而获得广泛的应用。 消息传递系统的通信方式属于高级通信方式。 又分为直接通信方式和间接通信方式两种。 Pipe所谓“管道”，是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件，又名pipe文件。 向管道(共享文件)提供输入的发送进程(即写进程)，以字符流形式将大量的数据送入管道；而接受管道输出的接收进程(即读进程)，则从管道中接收(读)数据。 由于发送进程和接收进程是利用管道进行通信的，故又称为管道通信 首创于UNIX系统，由于它能有效地传送大量数据，因而又被引入到许多其它操作系统中 Producer-Consumer Problem写作进程的通用范例 Producer process produces information Consumer process consume information 进程的状态有哪几种？请画出进程间基本的转换图，并说明不同状态之间怎样转换（语言描述转换图） PCB的信息包括哪些，请简单说明 调度队列有哪几种？请简单说明。 进程调度有哪几种？请分别简单说明一下。 Process Context包括哪些信息？简单说明 在什么情况下需要创建进程？简单说明。 简述进程创建过程。 什么情况下需要终止进程，简单说明。 什么情况下进程被阻塞？什么情况下进程被唤醒？简单说明 进程间通信有哪几种方式？简述每一种方式。]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>OS_Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统概念 操作系统结构/Operating-System Structures 第二章笔记]]></title>
    <url>%2F2017%2F12%2FOS_Concept_Chapter_Two%2F</url>
    <content type="text"><![CDATA[2017年9月14日07:34 写在前面本笔记仅仅是本人在上课时的一些随手记录，并不完整也不完全正确。 如有错误，请在评论中或直接联系我指正，谢谢！ 原始文件下载：(mht)(pdf) services structuring installed and customized, boot Operating-system servicesUser perspectiveUI CLI(Command-line interface) Batch GUI(Graphical user interface) Program execution Run, load it to the memory, end program I/O operations File or I/O device File-system manipulationCommunications Between process/ computers Via shared memory / through message passing Error detection Needs to be constantly aware of possible errors Take appropriate action Debugging facilities Resource sharingResource allocation When jobs running concurrently Special allocation code General request and release code Accounting Keep track of all resources(How much &amp; What kind of) Protection and security Control concurrent processes System calls &amp; APIConcept: System call/ function call区别含义 Shell: a set of command 操作系统最外面一层，管理用户与操作系统的交互 等待用户输入，向操作系统解释你的输入，并处理 System callsProgramming interfaceWritten in high-level languageApplication Program Interface(API) rather than direct system call use Most common API: Win32 POSIX JAVA System call sequence to copy the contents of one file to another file As an example of a standard API, consider the ReadFile() function in the Win32 API: a function for reading from a file.The API for this function appears Ln Figure 2.2. A description of the parameters passed to ReadFile() is as follows: HANDLE file—the file to be read. LPVOID buffer—a buffer where the data will be read into and written from. DWORD bytesToRead—the number of bytes to be read into the buffer. LPDWORD bytesRead—the number of bytes read during the last read. LPOVERLAPPED ovl—indicates if overlapped I/O is being used. Each system call have a number A table indexed according to the number *Dual mode(See Below) 用户程序不能直接访问系统内核模式提供的服务系统调用就是一种特殊的接口。通过这个接口，用户可以访问内核空间系统调用规定用户进程进入内核空间的具体位置API就是应用程序接口，是一些预定义的函数。跟内核没有必然的联系 两者的区别： API是函数的定义，规定功能，和内核无直接联系 系统调用通过中断 API需要一个或多个系统调用 API是一个提供给应用程序的接口函数，与程序员进行直接交互 系统调用不与程序员进行交互，根据API函数，通过软中断向内核提交请求 并不是所有API函数一一对应一个系统调用 一个C语言的例子 Design and Implementation of OSImportant principle to separate Policy（策略）: What to do Mechanism（机制）: How to do it OS StructureSimple Structure:(DOS)MS-DOSNot divided into modulesMost functionality in the least spaceInterfaces and levels of functionality are not well separated Layered Approach:(UNIX) Problems: Tend to be less efficient A layered design was first used in THE operating system. Its six layers are as follows: Layer 5 user programs Layer 4 buffering for input and Output Layer 3 operator-console device driver Layer 2 memory management Layer 1 CPU sheduling Layer 0 hardware Microkernels:(QNX)Move as much from the kernel into ‘user’ spaceCommunication takes place between user modules using message passing Benefits: Easier to extend Easier to port the operating system to new architectures More reliable (less code is running in kernel mode) More secure e.g.: Mac OSX(Mach &amp; BSD -> Kernel) (Hybrid Structure) Modular:(Solaris)Kernel: provide core services &amp; certain features to be implemented dynamicallyUses OOEach core component is separateEach talks to the others over known interfacesEach is loadable as needed within the kernel(Similar to layers but with more flexible) Problems: Kernel security crucial Virtual MachineTake layered approach to its logical conclusionTreat hardware and the operating system kernel as though they were all hardwareOS host: simulation, a process has its own processor and (virtual memory)The resources of the physical computer are shared to create the virtual machines Ad/Dis Provides complete protection of system resources Isolated from all other virtual machines Permit no direct sharing of resources Operating-System Generation*SYSGEN: system generation （部署）(P70) System BootBootstrap programBootstrap loader]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>OS_Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统概念 操作系统概念/Operating System Concept 第一章笔记]]></title>
    <url>%2F2017%2F12%2FOS_Concept_Chapter_One%2F</url>
    <content type="text"><![CDATA[2017年9月12日09:44 写在前面本笔记仅仅是本人在上课时的一些随手记录，并不完整也不完全正确。 如有错误，请在评论中或直接联系我指正，谢谢！ 原始文件下载：(mht)(pdf) cs &amp; os overviewProcess managementMemory managementStorage managementAdvanced topicsLab instructions System thinkingSystem analysis GoalsExecute user programs, solve user problems easier Convenient to useUse the computer hardware in an efficient manner ‘The one program running at all times om the computer’ —-KernelEverything else are system program/ application program 操作系统做什么 计算机系统可以大致分为4个组成部分：计算机硬件、操作系统、系统程序与应用程序、用户 （这四者严格分层叠代，并互相服务） 用户视角/ User’s Perspective单用户（PC）使用方便，性能次要，不在乎资源使用率 大型机与小型机相连（多用户）：为资源使用做优化确保所有的CPU时间、内存和I/O都能得到充分使用，并且确保没有用户使用超出其权限以外的资源 工作站共享资源 手持计算机由于CPU、内存速度有限，（电源、速度、接口限制）远程操作较少，目的是为了方便个人使用 系统视角/ System’s Perspective操作系统：资源分配器 （Resource Allocator） 操作系统必须决定如何为各个程序和用户分配资源，以便计算机系统能有效而公平地运行 操作系统是控制程序：管理用户程序的执行、防止计算机资源的错误使用或使用不当 操作系统定义难以精确定义操作系统是一直运行在计算机上的程序（通常称为内核） 计算机系统操作一个或多个CPU 设备控制器 通过共同的总线相连而成总线提供了对共享内存的访问CPU与设备控制器可以并发工作，并竞争内存周期 当打开电源或重启时，计算机开始运行 启动引导程序（bootstrap program）通常位于ROM或EEPROM中计算机硬件中的固件（firmware） 首先初始化系统中的所有部分（类似自检？）之后引导程序必须定位操作系统内核并把它装入内存 中断（interrupt） 硬件可随时通过系统总线向 CPU 发出信号，以触发中断。软件通过执行特别操作如系统调用(system call) (也称为监视器调用 (monitor call) )也能触发中断。 内部中断（trap） Hardware fault interrupt / the program interruptions / visit pipe break 不可屏蔽 外部中断（event） I/O interrupt / external interrupt 可屏蔽 中断是计算机结构的重要部分（Interrupt-driven） Software-generated interrupt: trap 中断向量（Interrupt Vector） 位于低地址内存（前100左右的位置） 存储各种设备的中断处理子程序的地址 Type of interrupt: Polling 轮询 Vector interrupt system 矢量化中断系统 存储结构内存（主存）——CPU直接访问操作辅存（secondary storage）——作为内存的扩充 对辅存的主要要求是它要能够永久地存储大量的数据 最为常用的辅存设备为磁盘 存储器性质： Speed Cost Volatility I/O 结构同步I/O 启动 直到 I/O完成再唤醒cpu（在此期间CPU处于等待状态） 异步I/O 启动 进内核 完成再通知线程（在此期间CPU继续处理其他事） 异步I/O在请求完成时，通过将文件句柄设为有信号状态来通知应用程序 或者应用程序通过GetOverlappedResult()查看I/O请求是否完成，也可以通过一个事件对象来通知应用程序 传统I/O方式：以字节为单位，通知cpu 这种I/O中断驱动适合移动少量数据，但对大块的数据移动，比如磁盘I /O，就会带来超载问题。 现代：DMA（direct memory access， 直接内存访问） 在为这种I/O设备设置好缓冲、指针和计数器之后，设备控制器能在本地缓冲和内存之间传送一整块数据，而无需CPU的干预。每块只产生一个中断。 由DMA控制器直接控制总线传递数据块。DMA控制器完成从I/O——内存 系统架构：单处理器系统 多处理器系统（并行系统 parallel system）或（紧耦合系统 tightly coupled system） 优点： 1）增加吞吐量 增加处理器的数量，希望能在更短的时间内做更多的事情 2）规模经济 共享外设、大容量存储和电源供给 3）增加可靠性 将任务分布在多个处理器上，这样单一处理器失灵不会导致整个系统的停止 缺点： 适度退化、容错 这些机制的实现较复杂 非对称多处理（asymmetric multiprocessing）处理器之间：主从关系 由主处理器控制系统，从处理器从主处理器那里寻找指令或执行预定义任务 对称多处理（symmetric multiprocessing，SMP）所有处理器对等 集群系统（cluster） 由两个或多个独立的系统藕合起来 非对称集群：热备份模式 对称集群：互相监视 与多处理器系统的区别： 多处理器系统中多个cpu共享系统其它资源 集群系统中每个个体都是一个独立完整的系统 操作系统结构 多道程序设计 分时系统（或多任务） 操作系统操作多道程序设计（系统）：批处理，在其他进程处理I/O时切换进程，以保持CPU繁忙 分时系统（或多任务）：切换频率很高，用户可以在程序运行期间与之进行交互 交互计算机系统：使用输入设备发送指令，响应通常小于1秒 分时操作系统：允许许多用户同时共享计算机 *进程（process）装入到内存并执行的程序 陷阱（或异常） trap exception软件中断 源于出错（除数为零或无效的存储访问） 或源于用户程序的一个特别请求（完成操作系统服务） 双重模式操作 用户模式 特权模式 User mode / kernel mode 用 户 程 执 用 系 嘥 训 用 从 系 嘥 用 回 式 位 - l) 内 枞 式 《 模 式 位 司 ） 执 行 系 训 用 用 户 模 式 到 内 核 模 式 的 转 換 Read Chapter 1 CH01 Exercise 1.2 1.4 1.5 1.6 1.10 1.11 1.13 1.15 1.17 CPU中断时，它暂停正在做的事并立即转到固定的位置去继续执行 位置：中断服务程序开始位置的地址]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>OS_Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[欢迎来到我的博客！本博客刚刚搭建，托管于github pages. 项目链接为：https://github.com/kimisecond/kimisecond.github.io. 关于本人的有关信息请参阅about页面，谢谢！]]></content>
      <categories>
        <category>Personal</category>
      </categories>
      <tags>
        <tag>Personal Information</tag>
      </tags>
  </entry>
</search>
